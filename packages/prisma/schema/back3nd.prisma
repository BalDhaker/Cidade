/// The `User` model represents system users.
/// In a GED context, users can create, own, and share documents.
/// In a BPM context, users may be assigned tasks within workflows or manage them.
/// A `role` field helps define user permissions and responsibilities.
model User {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apiUserId           String              @unique
  email               String              @unique
  name                String?
  role                String              @default("user") // Roles: user, admin, secretary
  documents           Document[]          @relation("UserDocuments")
  sharedDocuments     SharedDocument[]    @relation("SharedDocuments")
  certificates        DigitalCertificate[]
  tasks               Task[]              // Tasks assigned to the user in workflows.
  createdVersions     DocumentVersion[]   @relation("CreatedVersions") // Versions of documents created by the user.
  auditLogs           AuditLog[]          @relation("PerformedBy") // Logs of user actions in tasks for traceability.
  notifications       Notification[]      // Notifications sent to the user.
  createdAt           DateTime            @default(now())
}

/// The `Document` model is central in a GED system, representing any file stored and managed.
/// It supports various document types through `mimeType`, enabling flexible management of file types.
/// This model can store search-related metadata (`keywords`, `ocrText`) and is linked to workflows in BPM.
/// `signed` and `signedAt` help manage document authenticity through digital signing.
model Document {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  filePath            String
  mimeType            String              // MIME type to handle different file formats.
  keywords            String[]            // Keywords for search indexing.
  ocrText             String?             // OCR-extracted text for full-text search.
  owner               User                @relation("UserDocuments", fields: [ownerId], references: [id])
  ownerId             String              @db.Uuid
  signed              Boolean             @default(false)
  signedAt            DateTime?           // Date and time the document was signed.
  signature           String?             // Details or file path for the digital signature.
  sharedWith          SharedDocument[]    // Tracks document sharing with other users.
  versions            DocumentVersion[]   // Document version history.
  tasks               Task[]              // Tasks associated with the document in workflows.
  fileMetadata        FileMetadata?       // Metadata (size, checksum) for document management.
  attachments         Attachment[]        // Additional files linked to the document.
  createdAt           DateTime            @default(now())
}

/// The `DocumentVersion` model enables version control within GED.
/// It stores previous document states, supporting document tracking and restoration.
/// `versionNumber` and `changesDescription` enable an audit trail, valuable for compliance.
/// This model is linked to a user (`createdBy`) for accountability.
model DocumentVersion {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document            Document            @relation(fields: [documentId], references: [id])
  documentId          String              @db.Uuid
  versionNumber       Int                 // Indicates the version order of the document.
  filePath            String              // Path to the version file.
  changesDescription  String?             // Describes changes made in this version.
  createdBy           User                @relation("CreatedVersions", fields: [createdById], references: [id])
  createdById         String              @db.Uuid
  createdAt           DateTime            @default(now())
}

/// The `Workflow` model organizes business processes for document-based tasks in BPM.
/// Workflows represent entire processes with multiple tasks (`steps`) for document approvals,
/// reviews, and other interactions. `status` allows monitoring of the workflow's current state.
model Workflow {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String              // Workflow name, e.g., "Document Approval".
  description         String?             // Details the workflow purpose.
  type                String              @default("general") // Workflow type: general, approval, information
  status              String              // Tracks the workflow state (e.g., active, completed).
  tasks               Task[]              // List of steps within the workflow.
  auditLogs           AuditLog[]          // Logs tracking actions within the workflow.
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

/// The `Task` model defines a single step in a `Workflow`, representing an actionable item.
/// Tasks can be associated with specific documents (e.g., approval or review) and assigned to users.
/// `status` tracks task progress, and `dueDate` enforces deadlines, aiding in process management.
model Task {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow            Workflow            @relation(fields: [workflowId], references: [id])
  workflowId          String              @db.Uuid
  assignedTo          User?               @relation(fields: [assignedToId], references: [id])
  assignedToId        String?             @db.Uuid
  document            Document?           @relation(fields: [documentId], references: [id])
  documentId          String?             @db.Uuid
  title               String              // Task title (e.g., "Review Document").
  description         String?             // Additional details about the task.
  status              String              // Task progress (e.g., pending, in_progress, completed).
  dueDate             DateTime?           // Task deadline.
  auditLogs           AuditLog[]          // Logs of actions for accountability.
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

/// The `AuditLog` model tracks actions taken on a `Task` or `Workflow`, supporting a detailed audit trail.
/// It records each action, who performed it, and when, enabling transparency and accountability.
model AuditLog {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task                Task?               @relation(fields: [taskId], references: [id])
  taskId              String?             @db.Uuid
  workflow            Workflow?           @relation(fields: [workflowId], references: [id])
  workflowId          String?             @db.Uuid
  action              String              // Action performed (e.g., creation, edit, signature).
  performedBy         User                @relation("PerformedBy", fields: [performedById], references: [id])
  performedById       String              @db.Uuid
  timestamp           DateTime            @default(now()) // Action date and time.
  description         String?             // Additional details about the action.
}

/// The `Notification` model centralizes alerts and updates sent to users.
/// It tracks which notifications have been read.
model Notification {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
  message             String              // Notification message.
  read                Boolean             @default(false) // Indicates if the notification has been read.
  createdAt           DateTime            @default(now())
}

/// The `Attachment` model stores additional files linked to a document.
/// Attachments provide supplemental information for a document or task.
model Attachment {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document            Document            @relation(fields: [documentId], references: [id])
  documentId          String              @db.Uuid
  filePath            String              // Path to the attachment file.
  fileName            String              // Name of the attachment file.
  mimeType            String              // MIME type of the attachment.
  createdAt           DateTime            @default(now())
}

/// The `DigitalCertificate` model holds certificates for digital signing, crucial for document authentication.
model DigitalCertificate {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
  filePath            String              // Path to the .p12 digital certificate file.
  password            String              // Encrypted password for certificate access.
  createdAt           DateTime            @default(now())
}

/// The `FileMetadata` model stores additional information for document files.
model FileMetadata {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document            Document            @relation(fields: [documentId], references: [id])
  documentId          String              @unique @db.Uuid
  fileSize            Int                 // File size in bytes.
  mimeType            String              // MIME type for handling various file formats.
  checksum            String              // Checksum for file integrity verification.
  createdAt           DateTime            @default(now())
}

// Modelo Institution
model Institution {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  departments Department[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Modelo Department
model Department {
  id              Int           @id @default(autoincrement())
  name            String
  description     String?
  isSecretariat   Boolean        @default(false) // True se for uma secretaria
  institution     Institution    @relation(fields: [institutionId], references: [id])
  institutionId   String         @db.Uuid
  parentSecretariat Department?  @relation("ParentDepartment", fields: [parentSecretariatId], references: [id])
  parentSecretariatId Int?
  childDepartments Department[]  @relation("ParentDepartment")
  tickets         Ticket[]
  helpTopics      HelpTopic[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Modelo UserDepartment
model UserDepartment {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @db.Uuid
  department      Department  @relation(fields: [departmentId], references: [id])
  departmentId    Int
  role            String      // e.g., "member", "manager"
  createdAt       DateTime    @default(now())
}

// Modelo Ticket
model Ticket {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject           String
  description       String
  status            TicketStatus         @relation(fields: [statusId], references: [id])
  statusId          Int
  priority          TicketPriority       @relation(fields: [priorityId], references: [id])
  priorityId        Int
  createdBy         User                 @relation("TicketsCreated", fields: [createdById], references: [id])
  createdById       String               @db.Uuid
  assignedTo        User?                @relation("TicketsAssigned", fields: [assignedToId], references: [id])
  assignedToId      String?              @db.Uuid
  department        Department           @relation(fields: [departmentId], references: [id])
  departmentId      Int
  helpTopic         HelpTopic            @relation(fields: [helpTopicId], references: [id])
  helpTopicId       Int
  slaPlan           SLAPlan?             @relation(fields: [slaPlanId], references: [id])
  slaPlanId         Int?
  dueDate           DateTime?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  closedAt          DateTime?
  lastResponseAt    DateTime?
  threads           TicketThread[]
  attachments       TicketAttachment[]
  collaborators     TicketCollaborator[]
  customFields      TicketCustomField[]
}

// Modelo TicketStatus
model TicketStatus {
  id          Int       @id @default(autoincrement())
  name        String
  tickets     Ticket[]
}

// Modelo TicketPriority
model TicketPriority {
  id          Int       @id @default(autoincrement())
  name        String
  tickets     Ticket[]
}

// Modelo HelpTopic
model HelpTopic {
  id          Int         @id @default(autoincrement())
  topic       String
  description String?
  department  Department  @relation(fields: [departmentId], references: [id])
  departmentId Int
  tickets     Ticket[]
}

// Modelo SLAPlan
model SLAPlan {
  id          Int       @id @default(autoincrement())
  name        String
  gracePeriod Int       // em horas
  tickets     Ticket[]
}

// Modelo TicketThread
model TicketThread {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket      Ticket     @relation(fields: [ticketId], references: [id])
  ticketId    String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  message     String
  createdAt   DateTime   @default(now())
}

// Modelo TicketAttachment
model TicketAttachment {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketThread   TicketThread   @relation(fields: [ticketThreadId], references: [id])
  ticketThreadId String         @db.Uuid
  filePath       String
  fileName       String
  mimeType       String
  createdAt      DateTime       @default(now())
}

// Modelo TicketCollaborator
model TicketCollaborator {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket      Ticket     @relation(fields: [ticketId], references: [id])
  ticketId    String     @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
}

// Modelo CustomField
model CustomField {
  id          Int        @id @default(autoincrement())
  name        String
  fieldType   String     // e.g., 'text', 'number', 'date'
  tickets     TicketCustomField[]
}

// Modelo TicketCustomField
model TicketCustomField {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket      Ticket       @relation(fields: [ticketId], references: [id])
  ticketId    String       @db.Uuid
  field       CustomField  @relation(fields: [fieldId], references: [id])
  fieldId     Int
  value       String
}
